{"version":3,"sources":["components/Header/Header.js","utils/EmpDataContext.js","components/SearchBar/SearchBar.js","utils/API.js","components/EmpData/EmpData.js","components/EmpTable/EmpTable.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","EmpDataContext","React","createContext","search","setSearch","empData","setEmpData","searchResults","setSearchResults","tableHeadings","headings","name","width","setTableHeadings","orderBy","setOrderBy","asc","setAsc","SearchBar","context","useContext","type","placeholder","aria-label","aria-describedby","value","onChange","event","target","id","axios","get","EmpData","map","employee","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","date","dateArray","split","year","join","formatDOB","dob","EmpTable","style","cursor","onClick","App","useState","useEffect","API","then","data","results","sorted","filteredEmp","filter","toLowerCase","indexOf","sort","a","b","localeCompare","parseInt","slice","age","numA","handleSort","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f32529a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className=\"header\">\r\n            <h1>Employee Directory</h1>\r\n            <p>Click on each heading to sort or use the search box to filter your results</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\n\nconst EmpDataContext = React.createContext({\n    search: \"\",\n    setSearch: () => {},\n    empData: [],\n    setEmpData: () => {},\n    searchResults: [],\n    setSearchResults: () => {},\n    tableHeadings: {\n        headings: [\n            {name: \"Image\", width: \"10%\"},\n            {name: \"Name\", width: \"10%\"},\n            {name: \"Phone\", width: \"20%\"},\n            {name: \"Email\", width: \"20%\"},\n            {name: \"DOB\", width: \"10%\"}\n          ]\n    },\n    setTableHeadings: () => {},\n    orderBy: \"\",\n    setOrderBy: () => {},\n    asc: true,\n    setAsc: () => {}\n});\n\nexport default EmpDataContext;","import React, { useContext } from 'react';\nimport './style.css'\nimport EmpDataContext from '../../utils/EmpDataContext';\n\nfunction SearchBar() {\n\n    const context = useContext(EmpDataContext);\n\n    return (\n        <div className=\"SearchBar\">\n            <form>\n                <div className=\"input-group mb-3\">\n                    <input \n                    type=\"search\" \n                    className=\"form-control\" \n                    placeholder=\"Name\" \n                    aria-label=\"Name\" \n                    aria-describedby=\"button-addon2\"\n                    value={context.search} \n                    onChange={event => context.setSearch(event.target.value)}\n                    />\n                    <div className=\"input-group-append\">\n                        <button \n                        className=\"btn btn-outline-secondary\" \n                        type=\"button\" \n                        id=\"button-addon2\">\n                            Submit\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default SearchBar;","import axios from \"axios\";\r\n\r\nexport default{ \r\n    getUsers:function(){    \r\n\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","import React, { useContext } from 'react';\nimport EmpDataContext from '../../utils/EmpDataContext';\n\n// this is how the employee data is generated\n\nconst EmpData = () => {\n\n    const context = useContext(EmpDataContext);\n\n    function formatDOB(date) {\n        const dateArray = date.split(\"-\");\n        const year = dateArray[0];\n        const month = dateArray[1];\n        const dayArray = dateArray[2].split(\"T\");\n        const day = dayArray[0];\n        const formattedDOB = [month, day, year].join(\"-\");\n        return formattedDOB;\n    }\n\n    return (\n     \n            <tbody>\n               {context.searchResults.map((employee) => {\n                   return(\n                       <tr key={employee.login.uuid}>\n                           <td>\n                               <img\n                               src={employee.picture.medium}\n                               alt={\"profile picture for \" + employee.name.first + \" \" + employee.name.last}\n                               className=\"img-responsive\"\n                               />\n                           </td>\n                           <td className=\"align-middle\">\n                               {employee.name.first} {employee.name.last}\n                           </td>\n                           <td className=\"align-middle\">\n                               {employee.cell}\n                           </td>\n                           <td className=\"align-middle\">\n                               <a href={\"mailto:\" + employee.email} target=\"__blank\">\n                                   {employee.email}\n                               </a>\n                           </td>\n                           <td className=\"align-middle\">\n                               {formatDOB(employee.dob.date)}\n                           </td>\n                       </tr>\n                   )\n               })}\n                \n            </tbody>\n     \n    )\n}\n\nexport default EmpData;","import React, {useContext} from 'react';\nimport EmpDataContext from '../../utils/EmpDataContext';\nimport EmpData from '../EmpData/EmpData';\n\nconst EmpTable = () => {\n\n    const context = useContext(EmpDataContext)\n\n    return (\n        <div className=\"emp-table\">\n            <table className=\"table table-striped\">\n                <thead>\n                 <tr>\n                     {context.tableHeadings.headings.map(({name, width}) => {\n                        return (\n                            <th\n                            className=\"col\"\n                            key={name}\n                            style={{\n                                width: width,\n                                cursor: \"pointer\"\n                            }}\n                            onClick={() => {\n                                if (context.orderBy === name){\n                                    context.setAsc(!context.asc)\n                                }\n                                context.setOrderBy(name);\n                            }}\n                            >\n                                {name}\n                            </th>\n                        )\n                     })}\n                 </tr>                   \n                </thead>\n                <EmpData />\n            </table>\n        </div>\n    );\n}\n\nexport default EmpTable;\n\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header/Header';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport API from './utils/API';\nimport EmpTable from './components/EmpTable/EmpTable';\nimport EmpDataContext from './utils/EmpDataContext';\n\nfunction App() {\n\n  const [search, setSearch] = useState(\"\");\n  const [empData, setEmpData] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [tableHeadings, setTableHeadings] = useState({\n    headings: [\n      { name: \"Image\", width: \"10%\" },\n      { name: \"Name\", width: \"10%\" },\n      { name: \"Phone\", width: \"20%\" },\n      { name: \"Email\", width: \"20%\" },\n      { name: \"DOB\", width: \"10%\" }\n    ]\n  });\n  const [orderBy, setOrderBy] = useState(\"\");\n  const [asc, setAsc] = useState(true);\n\n\n  useEffect(() => {\n    API.getUsers()\n      .then(data => {\n        setEmpData(data.data.results)\n      })\n\n  }, [])\n\n  useEffect(() => {\n    const handleSort = () => {\n      let filteredEmp = empData.filter(employee => {\n        let name = employee.name.first + employee.name.last\n        return name.toLowerCase().indexOf(search.toLowerCase()) >= 0\n      });\n      let sortedEmp = [];\n      if (asc) {\n        sortedEmp = filteredEmp.sort((a, b) => {\n          switch(orderBy.toLowerCase()) {\n            case 'name':\n              return a.name.first.localeCompare(b.name.first);\n            case 'phone':\n              let numA = parseInt(a.cell.slice(1, 4));\n              let numB = parseInt(b.cell.slice(1, 4));\n              return numA - numB;\n            case 'dob':\n              return a.dob.age - b.dob.age\n            default:\n              return a.name.first.localeCompare(b.name.first);\n          }          \n        })\n      } else {\n        sortedEmp = filteredEmp.sort((a, b) => {\n          switch(orderBy.toLowerCase()) {\n            case 'name':\n              return b.name.first.localeCompare(a.name.first);\n            case 'phone':\n              let numA = parseInt(a.cell.slice(1, 4));\n              let numB = parseInt(b.cell.slice(1, 4));\n              return numB - numA;\n            case 'dob':\n              return b.dob.age - a.dob.age   \n            default:\n              return b.name.first.localeCompare(a.name.first);\n          }         \n        })\n      }\n      return sortedEmp;\n    }\n    let sorted = handleSort();\n    setSearchResults(sorted)\n  }, [search, empData, orderBy, asc])\n\n\n  return (\n    <div className=\"App\">\n      <EmpDataContext.Provider value={{\n        search, setSearch, \n        empData, setEmpData, \n        searchResults, setSearchResults, \n        tableHeadings, setTableHeadings, \n        orderBy, setOrderBy,\n        asc, setAsc\n      }}>\n        <Header />\n        <SearchBar />\n        <EmpTable />\n      </EmpDataContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}